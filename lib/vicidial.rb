require 'faraday'

class Vicidial
  def initialize(root_url:, user:, secret:, vici_callback:)
    @root_url, @user, @secret, @vici_callback = root_url, user, secret, vici_callback
  end

  def self.default_api
    vici_callback_url = ''
    if Rails.env.development?
      vici_callback_url = 'https://d2bb-172-248-52-177.ngrok.io'
    else
      vici_callback_url = 'https://trackerdeploy.herokuapp.com'
    end
    
    @default_api ||= new(
      root_url: 'http://vici.ayocon.com/vicidial/non_agent_api.php',
      user: Rails.application.credentials.vicidial_username,
      secret: Rails.application.credentials.vicidial_password,
      vici_callback: "#{vici_callback_url}/contacts?lead_id=--A--lead_id--B--&vendor_id=--A--vendor_lead_code--B--&phone_number=--A--phone_number--B--&group=--A--group--B--&user=--A--user--B--&key=#{Rails.application.credentials.api_challenge}"
    )
  end
  
  def agent_status(agent)
    response = Faraday.get(
      @root_url, {
        user: @user,
        pass: @secret,
        function: 'agent_status',
        source: 'CallRouter',
        agent_user: agent,
        stage: 'csv'
      }
    )
  end
	
	def valid_json?(string)
	  !!JSON.parse(string)
	rescue JSON::ParserError
	  false
	end
  
  def all_agents_status
    response = Faraday.get(
      'http://vici.ayocon.com/vicidial/admin.php', {
        user: @user,
        pass: @secret,
        function: 'all_agents_status',
        source: 'CallRouter'
      }
    )
		
		if valid_json?(response.body)
			#Array of user_id, calls_today, phone_number, length_in_secs:
			return JSON.parse(response.body)
		else
			return [["0", "0", "0", "0"]]
		end
  end
  
  def set_group_id(group_id)
    if Rails.env.development?
      "%015d" % group_id + 'd'
    else
      "%016d" % group_id
    end
  end
  
  def add_ingroup(funnel)
    group_id = set_group_id(funnel.id)
    response = Faraday.get(
      'http://vici.ayocon.com/vicidial/non_agent_api.php', {
        user: @user,
        pass: @secret,
        function: 'add_ingroup',
        source: 'CallRouter',
        group_id: group_id,
        group_name: "Funnel #{group_id}",
        start_call_url: @vici_callback
      }
    )
    funnel.update_attribute(:vicidial_ingroup_id, group_id) if response.body.include?('SUCCESS')
    Rails.logger.debug response.body
    return response
  end
  
  def delete_ingroup(funnel)
    response = Faraday.get(
      'http://vici.ayocon.com/vicidial/non_agent_api.php', {
        user: @user,
        pass: @secret,
        function: 'delete_ingroup',
        source: 'CallRouter',
        group_id: funnel.vicidial_ingroup_id
      }
    )
    Rails.logger.debug response.body
  end

  def add_external_phone(extension)
    response = Faraday.get(
      @root_url, {
        user: @user,
        pass: @secret,
        function: 'add_phone',
        source: 'CallRouter',
        extension: extension,
        dialplan_number: extension,
        voicemail_id: extension,
        server_ip: '66.165.241.18',
        protocol: 'EXTERNAL',
        phone_login: extension,
        phone_pass: rand.to_s[2..6],
        registration_password: 'v6kT9XlD37XsbnN',
        phone_full_name: "CallRouter #{extension}",
        local_gmt: '-5.00',
        outbound_cid: extension
      }
    )
  end
  
  def add_agent_user(campaign)
    name = ''
    if Rails.env.development?
      name = 'VTRouterDev'
    else
      name = 'VTRouter'
    end
    
    response = Faraday.get(
      @root_url, {
        user: @user,
        pass: @secret,
        function: 'add_user',
        source: 'CallRouter',
        agent_user: 'AUTOGENERATED',
        agent_pass: SecureRandom.urlsafe_base64(12),
        agent_user_level: '1',
        agent_full_name: "#{name} #{campaign.client_did}",
        agent_user_group: 'CallRouter'
      }
    )
    campaign.update_attribute(:vicidial_agent_user, response.body.split('|')[1]) if response.body.include?('SUCCESS')
    Rails.logger.debug response.body
  end
  
  def update_agent_user(extension)
    response = Faraday.get(
      @root_url, {
        user: @user,
        pass: @secret,
        function: 'update_user',
        source: 'CallRouter',
        agent_user: 'AUTOGENERATED',
        agent_pass: SecureRandom.urlsafe_base64(12),
        agent_user_level: '1',
        agent_full_name: extension,
        agent_user_group: 'CallRouter'
      }
    )
    Rails.logger.debug response.body
  end
  
  def delete_agent_user(campaign)
    response = Faraday.get(
      @root_url, {
        user: @user,
        pass: @secret,
        function: 'update_user',
        source: 'CallRouter',
        agent_user: campaign.vicidial_agent_user,
        delete_user: 'Y'
      }
    )
    Rails.logger.debug response.body
  end
  
  def add_did(did)
    group_id = set_group_id(did.funnel.id)
    
    response = Faraday.get(
      'http://vici.ayocon.com/vicidial/non_agent_api.php', {
        user: @user,
        pass: @secret,
        function: 'add_did',
        source: 'CallRouter',
        did_pattern: did.number,
        did_description: "Funnel #{group_id}"
      }
    )
    Rails.logger.debug response.body
  end
  
  # Already an exisitng Vicidial function.
  def update_did(did)
    response = ''
    if did.funnel.blank?
      response = Faraday.get(
        'http://vici.ayocon.com/vicidial/non_agent_api.php', {
          user: @user,
          pass: @secret,
          function: 'update_did',
          source: 'CallRouter',
          did_pattern: did.number,
          did_description: 'Unused',
          did_route: 'EXTEN'
        }
      )
    else
      group_id = set_group_id(did.funnel.id)
      response = Faraday.get(
        'http://vici.ayocon.com/vicidial/non_agent_api.php', {
          user: @user,
          pass: @secret,
          function: 'update_did',
          source: 'CallRouter',
          did_pattern: did.number,
          did_description: "Funnel #{group_id}",
          did_route: 'IN_GROUP',
          group: group_id
        }
      )
    end 
    
    Rails.logger.debug response.body
  end
  
  # in_groups takes pipe-separated values eg 'Inbound|SeanIndia'.
  def add_remote_agent(campaign)
    ingroups = ''
    campaign.funnels.each do |funnel|
      ingroups << "#{funnel.vicidial_ingroup_id}|"
    end
    
    lines = campaign.concurrent_call_limit
    lines = 1 if lines.to_i < 1
    
    response = Faraday.get(
      'http://vici.ayocon.com/vicidial/non_agent_api.php', {
        user: @user,
        pass: @secret,
        function: 'add_remote_agent',
        source: 'CallRouter',
        agent_user: campaign.vicidial_agent_user,
        number_of_lines: lines,
        server_ip: '66.165.241.18',
        external_extension: campaign.client_did,
        ra_status: 'ACTIVE',
        campaign_id: 'VTRouter',
        in_groups: ingroups.chop
      }
    )
    campaign.update_attribute(:vicidial_remote_agent, true) if response.body.include?('SUCCESS')
    Rails.logger.debug response.body
    if response.body.include?('THERE IS ALREADY A REMOTE AGENTS ENTRY')
      update_remote_agent(campaign)
    else
      return response
    end
  end
  
  def update_remote_agent(campaign)
    status = ''
    ingroups = ''
    if campaign.funnels.blank? || campaign.active == false
      status = 'INACTIVE'
    else
      status = 'ACTIVE'
      campaign.funnels.each do |funnel|
        ingroups << "#{funnel.vicidial_ingroup_id}|"
      end
    end
    
    lines = campaign.concurrent_call_limit
    lines = 1 if lines.to_i < 1
    
    response = Faraday.get(
      'http://vici.ayocon.com/vicidial/non_agent_api.php', {
        user: @user,
        pass: @secret,
        function: 'update_remote_agent',
        source: 'CallRouter',
        agent_user: campaign.vicidial_agent_user,
        number_of_lines: lines,
        server_ip: '66.165.241.18',
        external_extension: campaign.client_did,
        ra_status: status,
        campaign_id: 'VTRouter',
        in_groups: ingroups.chop
      }
    )
    Rails.logger.debug response.body
  end
  
  def update_filter_phone_group(funnel)
    did_pattern = funnel.dids.first.number
    funnel.campaigns.each do |campaign|
      # Let's remove any blank elements from the array:
      blocked_states = campaign.blocked_states.reject { |x| x.empty? }
      Rails.logger.debug "Blocked states: #{blocked_states}"
      
      unless blocked_states.blank?
        response = Faraday.get(
          'http://vici.ayocon.com/vicidial/non_agent_api.php', {
            user: @user,
            pass: @secret,
            function: 'update_filter_phone_group',
            source: 'CallRouter',
            blocked_states: blocked_states.join(','),
            did_pattern: did_pattern
          }
        )
        Rails.logger.debug response.body
      end
    end
  end
end
